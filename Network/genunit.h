#pragma once

#include <iostream>
#include <random>

#define SC_INCLUDE_DYNAMIC_PROCESSES
#include "systemc.h"
#include "io_port.h"
#include "crc.h"


/** @file genunit.h
 * @brief Declares the packet generator module
 */

class GenUnit : sc_module /// Module in charge of generating packets
/** Generates random packets on two distinct ports.
 * Each packet is firstly stored in a fifo, with its CRC-8 checksum computed on the fly
 * The packet's header is then sent, composed of the receiver's logical address, the sender's logical address and the CRC-8 cheksum.
 * The random data follows, and finally the byte 255, indicating the End Of Packet (EOP)
 *
 * The length of the random packets can be configured, as well as the speed at which bits are generated, and the delay between packets.
 *
 * Each packet (packet1 and packet2) are respectively generated by the threads packet_gen1 and packet_gen2, and written to ports port1 and port2.
 * Once a thread has written a whole packet, it waits until an acknowledge packet is sent back. In case of a negative answer, the whole packet is sent again.
 * In the other case, the fifo buffering the packet is consumed, to be ready to receive a new packet.
 */
{
public:
    /** Constructor of GenUnit.
     * @param mn Module's name
     * @param psize Packet size
     * @param speed Speed of the network, in bit/s
     * @param delay_packets Delay between two packets
     */

    GenUnit(sc_module_name mn, size_t psize=10, double speed=24e6, double delay_packets=100e-6);

    io_port port1{"port1"}, //!< First port, to send packet1 and receive the associated ack packet
            port2{"port2"}; //!< Second port, to send packet2 and receive the associated ack packet

private:
    void packet_gen1(); //!< Generates packet1
    void packet_gen2(); //!< Generates packet2

    size_t packet_size; //!< Packet size
    sc_time delay_between_bytes, //!< Delay between two consecutive bytes, calculated with the network's speed
            delay_between_packets; //!< Delay between two consecutive packets, 100ms by default

    sc_fifo<sc_uint<16>> packet_fifo1, //!< Fifo to store packet1 while it's being generated, and used as a backup in case of a transmission error
                        packet_fifo2; //!< Fifo to store packet2 while it's being generated, and used as a backup in case of a transmission error


	std::mt19937 rng;
	std::uniform_int_distribution<std::mt19937::result_type> dist;
    std::string name(); //!< Little function to color sc_module's name() result
};
